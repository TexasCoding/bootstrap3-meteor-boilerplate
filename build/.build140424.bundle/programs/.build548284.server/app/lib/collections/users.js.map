{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/users.js"],"names":[],"mappings":"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","file":"/lib/collections/users.js","sourcesContent":["Schema.UserCountry = new SimpleSchema({\n  name: {\n    type: String,\n    regEx: /^[A-Za-z _]*$/,\n    label: 'Country'\n  },\n  code: {\n    type: String,\n    regEx: /^[A-Z]{2}$/\n  }\n});\n\nSchema.UserProfile = new SimpleSchema({\n  firstName: {\n    type: String,\n    label: 'First name',\n    regEx: /^[A-Za-z _]*$/,\n    max: 25,\n    optional: false\n  },\n  lastName: {\n    type: String,\n    label: 'Last name',\n    regEx: /^[A-Za-z _]*$/,\n    max: 25,\n    optional: false\n  },\n  address: {\n    type: Schema.Address,\n    optional: false\n  },\n  phone: {\n    type: String,\n    regEx: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n    optional: true\n  },\n  fax: {\n    type: String,\n    regEx: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n    optional: true\n  },\n  cell: {\n    type: String,\n    regEx: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n    optional: true\n  },\n  birthday: {\n    type: Date,\n    optional: true\n  },\n  gender: {\n    type: String,\n    allowedValues: ['Male', 'Female'],\n    optional: true\n  },\n  organization: {\n    type: String,\n    optional: true\n  },\n  website: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true\n  },\n  bio: {\n    type: String,\n    optional: true\n  },\n  country: {\n    type: Schema.UserCountry,\n    optional: true\n  }\n});\n\nSchema.User = new SimpleSchema({\n  username: {\n    type: String,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  emails: {\n    type: Array,\n    // For accounts-password, either emails or username is required, but not both. It is OK to make this\n    // optional here because the accounts-password package does its own validation.\n    // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n    optional: true\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"emails.$.verified\": {\n    type: Boolean\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      } else {\n        this.unset();\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    },\n    denyInsert: true,\n    optional: true\n  },\n  profile: {\n    type: Schema.UserProfile,\n    optional: true\n  },\n  // Make sure this services field is in your schema if you're using any of the accounts packages\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  // Add `roles` to your schema if you use the meteor-roles package.\n  // Option 1: Object type\n  // If you specify that type as Object, you must also specify the\n  // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n  // Example:\n  // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n  // You can't mix and match adding with and without a group since\n  // you will fail validation in some cases.\n  roles: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n\nMeteor.users.attachSchema(Schema.User);\n"]}